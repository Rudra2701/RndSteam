package com.example.screentimetracker

import android.app.usage.UsageStats
import android.app.usage.UsageStatsManager
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.provider.Settings
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.util.*

class MainActivity : AppCompatActivity() {

    private val screenTimeLimit = 5 * 60 * 1000 // 5 minutes in milliseconds
    private var totalScreenTime = 0L
    private var lastTimeChecked = 0L

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Check if usage stats permission is granted
        if (!isUsageStatsPermissionGranted()) {
            requestUsageStatsPermission()
        }

        // Start screen time tracking
        trackScreenTime()
    }

    private fun trackScreenTime() {
        val usageStatsManager = getSystemService(Context.USAGE_STATS_SERVICE) as UsageStatsManager
        val calendar = Calendar.getInstance()
        calendar.add(Calendar.MINUTE, -1) // Get stats for the last minute

        // Query for usage stats (usage within the last minute)
        val usageStatsList: List<UsageStats> = usageStatsManager.queryUsageStats(
            UsageStatsManager.INTERVAL_DAILY,
            calendar.timeInMillis,
            System.currentTimeMillis()
        )

        if (usageStatsList.isNotEmpty()) {
            // Calculate screen time for the last minute
            val currentAppStats = usageStatsList.maxByOrNull { it.lastTimeUsed }
            totalScreenTime += currentAppStats?.totalTimeInForeground ?: 0

            // Check if total screen time exceeds limit
            if (totalScreenTime >= screenTimeLimit) {
                // Force user to close the app
                Toast.makeText(this, "You have reached the screen time limit!", Toast.LENGTH_LONG).show()
                finish() // Closes the app
            }
        }

        // Recheck every minute
        lastTimeChecked = System.currentTimeMillis()
        if (System.currentTimeMillis() - lastTimeChecked < 1000 * 60) {
            trackScreenTime()
        }
    }

    private fun isUsageStatsPermissionGranted(): Boolean {
        val appOps = getSystemService(Context.APP_OPS_SERVICE) as AppOpsManager
        val mode = appOps.checkOpNoThrow(
            "android:get_usage_stats",
            android.os.Process.myUid(),
            packageName
        )
        return mode == AppOpsManager.MODE_ALLOWED
    }

    private fun requestUsageStatsPermission() {
        val intent = Intent(Settings.ACTION_USAGE_ACCESS_SETTINGS)
        startActivity(intent)
    }
}
